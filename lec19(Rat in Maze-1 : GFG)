Consider a ret placed at (0,0) and it has to reach at (n-1,n-1) position in a square matrix . Matrix contains 1 and 0 only .If 0 , then it can not moved to 
that cell . Find all possible path where up move denoted as -'U, down move -'D, left move as -'L' and right move as 'R' ;

Input:
N = 4
m[][] = {{1, 0, 0, 0},
         {1, 1, 0, 1}, 
         {1, 1, 0, 0},
         {0, 1, 1, 1}}
Output:
DDRDRR DRDDRR


Your Task:  
You don't need to read input or print anything. Complete the function printPath() which takes N and 2D array m[ ][ ] as input parameters and returns the list of paths in lexicographically increasing order. 
Note: In case of no path, return an empty list. The driver will output "-1" automatically.

Expected Time Complexity: O((3N^2)).
Expected Auxiliary Space: O(L * X), L = length of the path, X = number of paths.

Constraints:
2 ≤ N ≤ 5
0 ≤ m[i][j] ≤ 1

//code :

class Solution {
    public static ArrayList<String> findPath(int[][] m, int n) {
        ArrayList<String> ans=new ArrayList<>();
        String cur="";
        int vis[][]=new int[n][n];
        //Arrays.fill(vis,0);
        if(m[0][0]==1)
        findPath(0,0,cur,ans,vis,m,n);
        return ans;
    }
    static void findPath(int x,int y,String cur,ArrayList<String> ans,int vis[][],
    int [][]m,int n){
        if(x==n-1 && y==n-1){
            ans.add(new String(cur));
            return;
        }
        //DLRU as we to return as lexicographic order
        
        //down move
        if(x+1<n && m[x+1][y]==1 && vis[x+1][y]==0){
            vis[x][y]=1;
            findPath(x+1,y,cur+'D',ans,vis,m,n);
            vis[x][y]=0;//backtrack
        }
        //left move
        if(y-1>=0 && m[x][y-1]==1 && vis[x][y-1]==0){
            vis[x][y]=1;
            findPath(x,y-1,cur+'L',ans,vis,m,n);
            vis[x][y]=0;//backtrack
        }
        
        //right move
        if(y+1<n && m[x][y+1]==1 && vis[x][y+1]==0){
            vis[x][y]=1;
            findPath(x,y+1,cur+'R',ans,vis,m,n);
            vis[x][y]=0;//backtrack
        }
        //up move
        if(x-1>=0 && m[x-1][y]==1 && vis[x-1][y]==0){
            vis[x][y]=1;
            findPath(x-1,y,cur+'U',ans,vis,m,n);
            vis[x][y]=0;//backtrack
        }
    }
}
